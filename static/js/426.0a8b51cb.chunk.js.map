{"version":3,"file":"static/js/426.0a8b51cb.chunk.js","mappings":"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","sources":["components/Experience/Experience.tsx","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\n\nconst ExperienceSection = styled.section`\n  min-height: 100vh;\n  padding: 4rem 2rem;\n  background: ${props => props.theme.background};\n`;\n\nconst Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst Title = styled(motion.h2)`\n  font-size: 3rem;\n  margin-bottom: 4rem;\n  text-align: center;\n  background: ${props => props.theme.primaryGradient};\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n`;\n\nconst Timeline = styled.div`\n  position: relative;\n`;\n\nconst TimelineLine = styled(motion.div)`\n  position: absolute;\n  left: 50%;\n  top: 0;\n  bottom: 0;\n  width: 2px;\n  background: ${props => props.theme.primary};\n  transform: translateX(-50%);\n  transform-origin: top;\n  \n  @media (max-width: 768px) {\n    left: 2rem;\n  }\n`;\n\nconst TimelineItem = styled(motion.div).withConfig({\n  shouldForwardProp: (prop) => prop !== 'isLeft'\n})<{ isLeft: boolean }>`\n  display: flex;\n  align-items: center;\n  margin-bottom: 4rem;\n  \n  ${props => props.isLeft ? `\n    flex-direction: row;\n    text-align: left;\n  ` : `\n    flex-direction: row-reverse;\n    text-align: left;\n  `}\n  \n  @media (max-width: 768px) {\n    margin-left: 4rem;\n  }\n`;\n\nconst ExperienceCard = styled(motion.div)`\n  flex: 1;\n  background: ${props => props.theme.glassBg};\n  backdrop-filter: ${props => props.theme.glassBackdrop};\n  border: 1px solid ${props => props.theme.border};\n  border-radius: 15px;\n  padding: 2rem;\n  margin: 0 2rem;\n  box-shadow: ${props => props.theme.cardShadow};\n  \n  @media (max-width: 768px) {\n    margin: 0;\n  }\n`;\n\nconst CompanyName = styled.h3`\n  font-size: 1.5rem;\n  color: ${props => props.theme.primary};\n  margin-bottom: 0.5rem;\n`;\n\nconst JobTitle = styled.h4`\n  font-size: 1.2rem;\n  color: ${props => props.theme.text};\n  margin-bottom: 0.5rem;\n`;\n\nconst Period = styled.p`\n  color: ${props => props.theme.textSecondary};\n  margin-bottom: 1rem;\n  font-weight: 500;\n`;\n\nconst Description = styled.ul`\n  list-style: none;\n  padding: 0;\n  \n  li {\n    margin-bottom: 0.5rem;\n    color: ${props => props.theme.textSecondary};\n    position: relative;\n    padding-left: 1rem;\n    \n    &::before {\n      content: 'â€¢';\n      color: ${props => props.theme.primary};\n      position: absolute;\n      left: 0;\n    }\n  }\n`;\n\nconst TimelineDot = styled.div`\n  width: 20px;\n  height: 20px;\n  background: ${props => props.theme.primary};\n  border-radius: 50%;\n  position: relative;\n  z-index: 2;\n  \n  @media (max-width: 768px) {\n    position: absolute;\n    left: 1.5rem;\n  }\n`;\n\nconst Experience: React.FC = () => {\n  const { ref, inView } = useInView({\n    threshold: 0.1,\n    triggerOnce: true\n  });\n\n  const experiences = [\n    {\n      company: \"Amdocs\",\n      title: \"Scrum Master & Software Engineer\",\n      period: \"July 2023 - Present\",\n      description: [\n        \"Led end-to-end delivery of complex custom telecom CRM project over 18 months, serving 2+ million customers\",\n        \"Managed cross-functional development team of 6 engineers while driving frontend architecture decisions using React & TypeScript\",\n        \"Bridged technical and business requirements by training customer teams on frontend interfaces and system functionality\",\n        \"Delivered mission-critical frontend features under tight deadlines while maintaining high code quality and system reliability\"\n      ]\n    },\n    {\n      company: \"Amdocs\",\n      title: \"Frontend Developer\",\n      period: \"Dec 2021 - July 2023 | Aug 2019 - March 2021\",\n      description: [\n        \"Developed scalable frontend solutions using React, Redux, and TypeScript for custom and core CRM platforms\",\n        \"Led end-to-end feature development from requirements analysis through deployment and customer training\",\n        \"Architected complex integrations between frontend components and backend services, handling high-volume data processing\",\n        \"Specialized in CRM client-side infrastructure development with focus on performance and user experience\"\n      ]\n    }\n  ];\n\n  return (\n    <ExperienceSection id=\"experience\" ref={ref}>\n      <Container>\n        <Title\n          initial={{ opacity: 0, y: 30 }}\n          animate={inView ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8 }}\n        >\n          Experience Timeline\n        </Title>\n        <Timeline>\n          <TimelineLine\n            initial={{ scaleY: 0 }}\n            animate={inView ? { scaleY: 1 } : {}}\n            transition={{ duration: 1.2, delay: 0.5 }}\n          />\n          {experiences.map((exp, index) => (\n            <TimelineItem\n              key={index}\n              isLeft={index % 2 === 0}\n              initial={{ opacity: 0, x: index % 2 === 0 ? -50 : 50 }}\n              animate={inView ? { opacity: 1, x: 0 } : {}}\n              transition={{ duration: 0.8, delay: index * 0.3 }}\n            >\n              <ExperienceCard\n                whileHover={{ \n                  y: -5,\n                  rotateY: index % 2 === 0 ? 5 : -5,\n                  scale: 1.02\n                }}\n                transition={{ type: \"spring\", stiffness: 300 }}\n              >\n                <CompanyName>{exp.company}</CompanyName>\n                <JobTitle>{exp.title}</JobTitle>\n                <Period>{exp.period}</Period>\n                <Description>\n                  {exp.description.map((item, i) => (\n                    <motion.li\n                      key={i}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={inView ? { opacity: 1, x: 0 } : {}}\n                      transition={{ duration: 0.5, delay: index * 0.3 + i * 0.1 }}\n                    >\n                      {item}\n                    </motion.li>\n                  ))}\n                </Description>\n              </ExperienceCard>\n              <TimelineDot />\n            </TimelineItem>\n          ))}\n        </Timeline>\n      </Container>\n    </ExperienceSection>\n  );\n};\n\nexport default Experience;","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["ExperienceSection","styled","section","props","theme","background","Container","div","Title","motion","h2","primaryGradient","Timeline","TimelineLine","primary","TimelineItem","withConfig","shouldForwardProp","prop","isLeft","ExperienceCard","glassBg","glassBackdrop","border","cardShadow","CompanyName","h3","JobTitle","h4","text","Period","p","textSecondary","Description","ul","TimelineDot","Experience","ref","inView","useInView","threshold","triggerOnce","_jsx","id","children","_jsxs","initial","opacity","y","animate","transition","duration","scaleY","delay","company","title","period","description","map","exp","index","x","whileHover","rotateY","scale","type","stiffness","item","i","li","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}