{"version":3,"file":"static/js/260.0c9dcfa6.chunk.js","mappings":"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","sources":["components/CodeArt/CodeArt.tsx","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\n\nconst CodeArtSection = styled.section`\n  min-height: 100vh;\n  padding: 4rem 2rem;\n  background: ${props => props.theme.backgroundSecondary};\n`;\n\nconst Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst Title = styled(motion.h2)`\n  font-size: clamp(2rem, 5vw, 3rem);\n  margin-bottom: 4rem;\n  text-align: center;\n  background: ${props => props.theme.primaryGradient};\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  \n  @media (max-width: 768px) {\n    margin-bottom: 2rem;\n  }\n`;\n\nconst CodeContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst TerminalWrapper = styled(motion.div)`\n  background: #1a1f36;\n  border-radius: 15px;\n  padding: 1rem;\n  border: 1px solid ${props => props.theme.border};\n  box-shadow: ${props => props.theme.cardShadow};\n  height: 400px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TerminalHeader = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 1rem;\n  border-bottom: 1px solid ${props => props.theme.border};\n  margin-bottom: 1rem;\n`;\n\nconst TerminalDot = styled.div<{ color: string }>`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: ${props => props.color};\n`;\n\nconst CodeBlock = styled.div`\n  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n  font-size: 0.9rem;\n  line-height: 1.6;\n  color: #e2e8f0;\n  padding: 1rem;\n  flex: 1;\n  overflow-y: auto;\n`;\n\nconst CodeLine = styled(motion.div).withConfig({\n  shouldForwardProp: (prop) => prop !== 'delay'\n})<{ delay: number }>`\n  margin-bottom: 0.5rem;\n  \n  .keyword { color: #667eea; }\n  .string { color: #f6ad55; }\n  .function { color: #4299e1; }\n  .comment { color: #a0aec0; font-style: italic; }\n  .number { color: #f093fb; }\n`;\n\nconst VisualOutput = styled(motion.div)`\n  background: ${props => props.theme.background};\n  border-radius: 15px;\n  padding: 2rem;\n  border: 1px solid ${props => props.theme.border};\n  box-shadow: ${props => props.theme.cardShadow};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 400px;\n  position: relative;\n  overflow: hidden;\n`;\n\nconst AnimatedShape = styled(motion.div).attrs<{ color: string; size: number; x: number; y: number }>(props => ({\n  style: {\n    width: `${props.size}px`,\n    height: `${props.size}px`,\n    background: props.color,\n    left: `${props.x}%`,\n    top: `${props.y}%`,\n  }\n}))`\n  position: absolute;\n  border-radius: 50%;\n`;\n\nconst CodeArt: React.FC = () => {\n  const { ref, inView } = useInView({\n    threshold: 0.1,\n    triggerOnce: true\n  });\n\n  const [currentLine, setCurrentLine] = useState(0);\n  const [showParticles, setShowParticles] = useState(false);\n\n  const codeLines = useMemo(() => [\n    '// Creating beautiful animations with React',\n    'const <span class=\"function\">createParticles</span> = () => {',\n    '  <span class=\"keyword\">const</span> particles = [];',\n    '  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i < <span class=\"number\">50</span>; i++) {',\n    '    particles.push({',\n    '      x: <span class=\"function\">Math.random</span>() * <span class=\"number\">100</span>,',\n    '      y: <span class=\"function\">Math.random</span>() * <span class=\"number\">100</span>,',\n    '      color: <span class=\"string\">`hsl($&#123;Math.random() * 360&#125;, 70%, 60%)`</span>,',\n    '      size: <span class=\"function\">Math.random</span>() * <span class=\"number\">20</span> + <span class=\"number\">10</span>',\n    '    });',\n    '  }',\n    '  <span class=\"keyword\">return</span> particles;',\n    '};',\n    '',\n    '<span class=\"comment\">// This code generates the animation you see →</span>'\n  ], []);\n\n  useEffect(() => {\n    if (!inView) return;\n\n    const interval = setInterval(() => {\n      if (currentLine < codeLines.length) {\n        setCurrentLine(prev => prev + 1);\n      }\n    }, 800);\n\n    return () => clearInterval(interval);\n  }, [inView, currentLine, codeLines]);\n\n  // Separate effect to trigger particles independently\n  useEffect(() => {\n    if (!inView) return;\n\n    const timer = setTimeout(() => {\n      setShowParticles(true);\n    }, 2000); // Show particles after 2 seconds\n\n    return () => clearTimeout(timer);\n  }, [inView]);\n\n  const particles = useMemo(() => Array.from({ length: 8 }, (_, i) => ({\n    id: i,\n    x: Math.random() * 80,\n    y: Math.random() * 80,\n    size: Math.random() * 20 + 10,\n    color: `hsl(${Math.random() * 360}, 70%, 60%)`\n  })), []);\n\n  return (\n    <CodeArtSection id=\"code-art\" ref={ref}>\n      <Container>\n        <Title\n          initial={{ opacity: 0, y: 30 }}\n          animate={inView ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8 }}\n        >\n          Code Meets Art\n        </Title>\n        \n        <CodeContainer>\n          <TerminalWrapper\n            initial={{ opacity: 0, x: -50 }}\n            animate={inView ? { opacity: 1, x: 0 } : {}}\n            transition={{ duration: 0.8, delay: 0.3 }}\n          >\n            <TerminalHeader>\n              <TerminalDot color=\"#ff5f57\" />\n              <TerminalDot color=\"#ffbd2e\" />\n              <TerminalDot color=\"#28ca42\" />\n              <span style={{ marginLeft: '1rem', color: '#a0aec0', fontSize: '0.9rem' }}>\n                particle-animation.js\n              </span>\n            </TerminalHeader>\n            <CodeBlock>\n              {codeLines.slice(0, currentLine).map((line, index) => (\n                <CodeLine\n                  key={index}\n                  delay={index * 0.1}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.3, delay: index * 0.1 }}\n                  dangerouslySetInnerHTML={{ __html: line }}\n                />\n              ))}\n            </CodeBlock>\n          </TerminalWrapper>\n\n          <VisualOutput\n            initial={{ opacity: 0, x: 50 }}\n            animate={inView ? { opacity: 1, x: 0 } : {}}\n            transition={{ duration: 0.8, delay: 0.5 }}\n          >\n            {particles.map((particle, index) => (\n              <AnimatedShape\n                key={particle.id}\n                color={particle.color}\n                size={particle.size}\n                x={particle.x}\n                y={particle.y}\n                initial={{ scale: 0, opacity: 0 }}\n                animate={showParticles ? { \n                  scale: 1, \n                  opacity: 1,\n                  x: [particle.x, particle.x + 20, particle.x - 10, particle.x],\n                  y: [particle.y, particle.y - 15, particle.y + 10, particle.y]\n                } : {}}\n                transition={{ \n                  duration: 2,\n                  delay: index * 0.1,\n                  repeat: Infinity,\n                  repeatType: \"reverse\",\n                  ease: \"easeInOut\"\n                }}\n              />\n            ))}\n          </VisualOutput>\n        </CodeContainer>\n      </Container>\n    </CodeArtSection>\n  );\n};\n\nexport default CodeArt;","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["CodeArtSection","styled","section","props","theme","backgroundSecondary","Container","div","Title","motion","h2","primaryGradient","CodeContainer","TerminalWrapper","border","cardShadow","TerminalHeader","TerminalDot","color","CodeBlock","CodeLine","withConfig","shouldForwardProp","prop","VisualOutput","background","AnimatedShape","attrs","style","width","size","height","left","x","top","y","CodeArt","ref","inView","useInView","threshold","triggerOnce","currentLine","setCurrentLine","useState","showParticles","setShowParticles","codeLines","useMemo","useEffect","interval","setInterval","length","prev","clearInterval","timer","setTimeout","clearTimeout","particles","Array","from","_","i","id","Math","random","_jsx","children","_jsxs","initial","opacity","animate","transition","duration","delay","marginLeft","fontSize","slice","map","line","index","dangerouslySetInnerHTML","__html","particle","scale","repeat","Infinity","repeatType","ease","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}